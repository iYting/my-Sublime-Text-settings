{
    // when should this plugin work?
    "event_listeners": {
        "on_activated_async": true,
        "on_clone_async": true,
        "on_load_async": true,
        "on_modified_async": true,
        "on_new_async": true,
        "on_post_paste": true,
        "on_pre_save_async": true,
    },
    // the max lookup length for the first line
    // a negative number means no limitation
    "first_line_length_max": 80,
    // how detailed log messages should be?
    // "CRITICAL" (very few), "ERROR", "WARNING", "INFO", "DEBUG" (most detailed) and "NOTHING" (nothing)
    "log_level": "INFO",
    // syntax maaping rules
    "syntax_mapping": {
        "ANSIescape/ANSI.": [
            "^\\s*\\[SideBarGit@.*\\] git +(?:blame|lg?)\\b",
        ],
        "Makefile/Makefile.": [
            "(?i)^#\\s*-\\*-\\s+Makefile\\s+-\\*-",
        ],
        "Markdown/Markdown.": [
            "^Package Control Messages$",
        ],
        "ApacheConf/ApacheConf.": [
            "^<(?:VirtualHost|Directory|Macro)",
        ],
        "Packages/PHP/PHP.": [
            "<\\?php",
            "<\\?=",
        ]
    },
    // the scope that this plugin should work (regular expression)
    // leave it blank to match any scope
    "working_scope": "(?x)^(text.plain | source.diff | source.nginx)\\b",
    // try to remove these file extensions from the file name and set
    // a corresponding syntax if there is a matching one
    "try_filename_remove_exts": [
        "-dev",
        "-development",
        "-dist",
        "-optional",
        "-prod",
        "-production",
        "-test",
        ".backup",
        ".bak",
        ".default",
        ".dist",
        ".example",
        ".inc",
        ".include",
        ".local",
        ".orig",
        ".sample",
        ".test",
        ".tpl",
    ],
}
